diagnosis
diagnosis==0
sum(diagnosis==0)
dummyVars(diagnosis)
dummyVars(training$diagnosis)
dummyVars(training$diagnosis,1)
training$diagnosis
training$diagnosis<-as.numeric(training$diagnosis)
model<-glm(as.formula(paste(colnames(training)[1], "~",
paste(colnames(training)[58:69], collapse = "+"),
sep = "")),data = training)
model
summary(model)
predict(model,testing[,58:69])
model
??glm
library(caret)
library(AppliedPredictiveModeling)
set.seed(3433)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
grep("IL",names(training))
grep("diagnosis",names(training))
#training$diagnosis<-as.numeric(training$diagnosis)
model<-glm(as.formula(paste(colnames(training)[1], "~",
paste(colnames(training)[58:69], collapse = "+"),
sep = "")),data = training, family=binomial)
#training$diagnosis<-as.numeric(training$diagnosis)
predict(model,testing[,58:69])
model
predict(model,test[,58:69])
predict(model,testing[,58:69])
#training$diagnosis<-as.numeric(training$diagnosis)
model<-glm(as.formula(paste(colnames(training)[1], "~",
paste(colnames(training)[58:69], collapse = "+"),
sep = "")),data = training, family=logit)
model<-glm(as.formula(paste(colnames(training)[1], "~",
paste(colnames(training)[58:69], collapse = "+"),
sep = "")),data = training, family=binomial())
model
predict(model,testing[,58:69])
predict(model,testing[,58:69])>0
predict(model,testing[,58:69])>0==as.nummeric(testing$diagnosis)
(predict(model,testing[,58:69])>0)==as.nummeric(testing$diagnosis)
(predict(model,testing[,58:69])>0)==as.numeric(testing$diagnosis)
sum((predict(model,testing[,58:69])>0)==as.numeric(testing$diagnosis))
sum((predict(model,testing[,58:69])>0)==as.numeric(testing$diagnosis))/length(testing)
sum((predict(model,testing[,58:69])>0.5)==as.numeric(testing$diagnosis))/length(testing)
sum((predict(model,testing[,58:69])<0)==as.numeric(testing$diagnosis))/length(testing)
as.numeric(testing$diagnosis)
as.numeric(testing$diagnosis)-1
sum((predict(model,testing[,58:69])<0)==(as.numeric(testing$diagnosis)-1)/length(testing)
)
sum((predict(model,testing[,58:69])<0)==(as.numeric(testing$diagnosis)-1))/length(testing)
sum((predict(model,testing[,58:69])>0)==(as.numeric(testing$diagnosis)-1))/length(testing)
sum((predict(model,testing[,58:69])>0.5)==(as.numeric(testing$diagnosis)-1))/length(testing)
sum((predict(model,testing[,58:69])<0.5)==(as.numeric(testing$diagnosis)-1))/length(testing)
model<-glm(as.formula(paste(colnames(training)[1], "~",
paste(colnames(training)[58:69], collapse = "+"),
sep = "")),data = training, family=binomial(),link=logit)
#training$diagnosis<-as.numeric(training$diagnosis)
predict(model,testing[,58:69])
predict(model,testing[,58:69],family=binomial)
predict(model,testing[,58:69],type ="response")
predict(model,testing[,58:69],type ="response")>0.5
sum((predict(model,testing[,58:69],type="response")<0.5)==(as.numeric(testing$diagnosis)-1))/length(testing)
sum((predict(model,testing[,58:69],type="response")>0.5)==(as.numeric(testing$diagnosis)-1))/length(testing)
predict(model,testing[,58:69],type ="response")
predict(model,testing[,58:69],type="predicted")>0.5
predict(model,testing[,58:69],type="terms")>0.5
predict(model,testing[,58:69],type="terms")
predict(model,testing[,58:69],type="predicted")
predict(model,testing[,58:69],type="link")
predict(model,testing[,58:69],type="response")
predict(model,testing[,58:69],type="response")>0.5
as.numeric(predict(model,testing[,58:69],type="response")>0.5)
as.numeric(predict(model,testing[,58:69],type="response")>0.5)==
(as.numeric(testing$diagnosis)-1)
sum(as.numeric(predict(model,testing[,58:69],type="response")>0.5)==
(as.numeric(testing$diagnosis)-1))
sum(as.numeric(predict(model,testing[,58:69],type="response")>0.5)==
(as.numeric(testing$diagnosis)-1))/length(testing$diagnosis)
library(AppliedPredictiveModeling)
data(segmentationOriginal)
library(caret)
library(AppliedPredictiveModeling)
data(segmentationOriginal)
library(caret)
set.seed(125)
segmentationOriginal$Case
training=segmentationOriginal(segmentationOriginal$Case=="Train",)
set.seed(125)
training=segmentationOriginal[segmentationOriginal$Case=="Train",]
library(AppliedPredictiveModeling)
data(segmentationOriginal)
library(caret)
training=segmentationOriginal[segmentationOriginal$Case=="Train",]
testing=segmentationOriginal[segmentationOriginal$Case=="Test",]
set.seed(125)
segmentationOriginal
names(segmentationOriginal)
segmentationOriginal$Cell
segmentationOriginal$Class
modfit<-train(class~.,method="rpart",data=training)
library(AppliedPredictiveModeling)
data(segmentationOriginal)
library(caret)
training=segmentationOriginal[segmentationOriginal$Case=="Train",]
testing=segmentationOriginal[segmentationOriginal$Case=="Test",]
set.seed(125)
modfit<-train(class~.,method="rpart",data=training)
library(AppliedPredictiveModeling)
data(segmentationOriginal)
library(caret)
training=segmentationOriginal[segmentationOriginal$Case=="Train",]
testing=segmentationOriginal[segmentationOriginal$Case=="Test",]
set.seed(125)
modfit<-train(Class~.,method="rpart",data=training)
install.packages("rpart")
install.packages("rpart")
library(AppliedPredictiveModeling)
data(segmentationOriginal)
library(caret)
training=segmentationOriginal[segmentationOriginal$Case=="Train",]
testing=segmentationOriginal[segmentationOriginal$Case=="Test",]
set.seed(125)
modfit<-train(Class~.,method="rpart",data=training)
library(AppliedPredictiveModeling)
data(segmentationOriginal)
library(caret)
library(rpart)
training=segmentationOriginal[segmentationOriginal$Case=="Train",]
testing=segmentationOriginal[segmentationOriginal$Case=="Test",]
set.seed(125)
modfit<-train(Class~.,method="rpart",data=training)
install.packages('e1071', dependencies=TRUE)
library(AppliedPredictiveModeling)
data(segmentationOriginal)
library(caret)
library(rpart)
training=segmentationOriginal[segmentationOriginal$Case=="Train",]
testing=segmentationOriginal[segmentationOriginal$Case=="Test",]
set.seed(125)
modfit<-train(Class~.,method="rpart",data=training)
plot(modfit$finalModel)
print(modfit$finalModel)
modfit<-train(Class~.,method="rpart",data=training)
plot(modfit$finalModel,uniform=TRUE)
text(modfit$finalModel,use.n=TRUE,all=TRUE,cex=.8)
install.packages("pgmm")
olive
library(pgmm)
data(olive)
olive = olive[,-1]
newdata = as.data.frame(t(colMeans(olive)))
olive
library(pgmm)
data(olive)
olive = olive[,-1]
modfit<-train(Class~.,method="rpart",data=training)
newdata = as.data.frame(t(colMeans(olive)))
library(pgmm)
data(olive)
olive = olive[,-1]
modfit<-train(Area~.,method="rpart",data=olive)
newdata = as.data.frame(t(colMeans(olive)))
predict(modFit,newdata=newdata)
library(pgmm)
data(olive)
olive = olive[,-1]
modfit<-train(Area~.,method="rpart",data=olive)
newdata = as.data.frame(t(colMeans(olive)))
predict(modfit,newdata=newdata)
olive$Area
library(ElemStatLearn)
data(SAheart)
set.seed(8484)
train = sample(1:dim(SAheart)[1],size=dim(SAheart)[1]/2,replace=F)
trainSA = SAheart[train,]
testSA = SAheart[-train,]
install.packages("ElemStatLearn")
library(ElemStatLearn)
data(SAheart)
set.seed(8484)
train = sample(1:dim(SAheart)[1],size=dim(SAheart)[1]/2,replace=F)
trainSA = SAheart[train,]
testSA = SAheart[-train,]
library(ElemStatLearn)
data(SAheart)
set.seed(8484)
train = sample(1:dim(SAheart)[1],size=dim(SAheart)[1]/2,replace=F)
trainSA = SAheart[train,]
testSA = SAheart[-train,]
modelFit<-train(chd~age+alcohol+obesity+tobacco+typea+ldl,data=trainSA,method="glm", family="binomial")
chd
trainSA$chd
predict(modelFit,newdata=testSA,"response")
predict(modelFit,testSA,"response")
predict(modelFit,testSA)
library(ElemStatLearn)
data(SAheart)
set.seed(8484)
train = sample(1:dim(SAheart)[1],size=dim(SAheart)[1]/2,replace=F)
trainSA = SAheart[train,]
testSA = SAheart[-train,]
set.seed(13234)
modelFit<-train(chd~age+alcohol+obesity+tobacco+typea+ldl,data=trainSA,method="glm", family="binomial")
trainPrediction<-predict(modelFit,testSA)
testPrediction<-predict(modelFit,testSA)
missClass = function(values,prediction){sum(((prediction > 0.5)*1) != values)/length(values)}
missClass(trainPrediction,trainSA$chd)
missClass(testPrediction,testSA$chd)
testPrediction
testSA$chd
missClass = function(values,prediction){sum(((prediction > 0.5)*1) != values)/length(values)}
missClass(trainSA$chd,trainPrediction)
missClass(testSA$chd,testPrediction)
library(ElemStatLearn)
data(SAheart)
set.seed(8484)
train = sample(1:dim(SAheart)[1],size=dim(SAheart)[1]/2,replace=F)
trainSA = SAheart[train,]
testSA = SAheart[-train,]
set.seed(13234)
modelFit<-train(chd~age+alcohol+obesity+tobacco+typea+ldl,data=trainSA,method="glm", family="binomial")
trainPrediction<-predict(modelFit,trainSA)
testPrediction<-predict(modelFit,testSA)
missClass = function(values,prediction){sum(((prediction > 0.5)*1) != values)/length(values)}
missClass(testSA$chd,testPrediction)
missClass(trainSA$chd,trainPrediction)
library(ElemStatLearn)
data(vowel.train)
data(vowel.test)
vowel.train$y
vowel.train$y<-as.factor(vowel.train$y)
library(ElemStatLearn)
data(vowel.train)
data(vowel.test)
vowel.train$y<-as.factor(vowel.train$y)
vowel.test$y<-as.factor(vowel.test$y)
vowel.train$y<-as.factor(vowel.train$y)
library(ElemStatLearn)
data(vowel.train)
data(vowel.test)
vowel.train$y<-as.factor(vowel.train$y)
vowel.test$y<-as.factor(vowel.test$y)
randomForest()
randomForest::randomForest(vowel.train
randomForest::randomForest(vowel.train)
modelFit <- randomForest(y~.,
data=vowel.train,
importance=TRUE,
ntree=2000)
library(ElemStatLearn)
library(randomForest)
data(vowel.train)
data(vowel.test)
vowel.train$y<-as.factor(vowel.train$y)
vowel.test$y<-as.factor(vowel.test$y)
set.seed(33833)
modelFit <- randomForest(y~.,
data=vowel.train,
importance=TRUE,
ntree=2000)
varImpPlot(modelFit)
modelFit$localImportance
varImpPlot(modelFit)
modelFit <- randomForest(y~.,
data=vowel.train,
ntree=2000)
varImp(modelFit)
varImp(modelFit)
sort(varImp(modelFit))
varImp(modelFit)
order(varImp(modelFit))
varImp()
??varImp
varImp(modelFit)
modelFit <- randomForest(y~.,
data=vowel.train,
importance=TRUE,
ntree=100)
sort(varImp(modelFit))
library(ElemStatLearn)
library(randomForest)
data(vowel.train)
data(vowel.test)
vowel.train$y<-as.factor(vowel.train$y)
vowel.test$y<-as.factor(vowel.test$y)
set.seed(33833)
modelFit <- randomForest(y~.,
data=vowel.train,
importance=TRUE,
ntree=100)
order(varImp(modelFit))
library(ElemStatLearn)
library(randomForest)
data(vowel.train)
data(vowel.test)
vowel.train$y<-as.factor(vowel.train$y)
vowel.test$y<-as.factor(vowel.test$y)
set.seed(33833)
modelFit <- randomForest(y~.,
data=vowel.train,
importance=TRUE,
ntree=100)
varImp(modelFit)
library(ElemStatLearn)
library(randomForest)
data(vowel.train)
data(vowel.test)
vowel.train$y<-as.factor(vowel.train$y)
vowel.test$y<-as.factor(vowel.test$y)
set.seed(33833)
modelFit <- randomForest(y~.,
data=vowel.train,
importance=TRUE,
ntree=2000)
varImp(modelFit))
varImp(modelFit)
library(ElemStatLearn)
library(randomForest)
data(vowel.train)
data(vowel.test)
vowel.train$y<-as.factor(vowel.train$y)
vowel.test$y<-as.factor(vowel.test$y)
set.seed(33833)
modelFit <- randomForest(y~.,
data=vowel.train,
importance=TRUE,
ntree=2000)
varImp(modelFit)
library(ElemStatLearn)
library(randomForest)
data(vowel.train)
data(vowel.test)
vowel.train$y<-as.factor(vowel.train$y)
vowel.test$y<-as.factor(vowel.test$y)
set.seed(33833)
modelFit <- randomForest(y~.,
data=vowel.train,
importance=TRUE,
ntree=100)
varImp(modelFit)
library(ElemStatLearn)
library(randomForest)
data(vowel.train)
data(vowel.test)
vowel.train$y<-as.factor(vowel.train$y)
vowel.test$y<-as.factor(vowel.test$y)
set.seed(33833)
modelFit <- randomForest(y~.,
data=vowel.train,
importance=TRUE,
ntree=100)
varImpPlot(modelFit)
library(ElemStatLearn)
library(randomForest)
data(vowel.train)
data(vowel.test)
vowel.train$y<-as.factor(vowel.train$y)
vowel.test$y<-as.factor(vowel.test$y)
set.seed(33833)
modelFit <- randomForest(y~.,
data=vowel.train,
importance=TRUE,
ntree=2000)
varImpPlot(modelFit)
modelFit <- randomForest(y~.,
data=vowel.test,
importance=TRUE,
ntree=2000)
varImpPlot(modelFit)
data<-c(vowel.train,vowel.test)
??c
??c
library(ElemStatLearn)
library(randomForest)
data(vowel.train)
data(vowel.test)
vowel.train$y<-as.factor(vowel.train$y)
vowel.test$y<-as.factor(vowel.test$y)
set.seed(33833)
data<-rbind(vowel.train,vowel.test)
modelFit <- randomForest(y~.,
data=vowel.test,
importance=TRUE,
ntree=2000)
varImpPlot(modelFit)
library(ElemStatLearn)
library(randomForest)
data(vowel.train)
data(vowel.test)
vowel.train$y<-as.factor(vowel.train$y)
vowel.test$y<-as.factor(vowel.test$y)
set.seed(33833)
data<-rbind(vowel.train,vowel.test)
modelFit <- randomForest(y~.,
data=data,
importance=TRUE,
ntree=2000)
varImpPlot(modelFit)
library(ElemStatLearn)
data(SAheart)
set.seed(8484)
train = sample(1:dim(SAheart)[1],size=dim(SAheart)[1]/2,replace=F)
trainSA = SAheart[train,]
testSA = SAheart[-train,]
set.seed(13234)
modelFit<-train(chd~age+alcohol+obesity+tobacco+typea+ldl,data=trainSA,method="glm", family="binomial")
trainPrediction<-predict(modelFit,trainSA)
testPrediction<-predict(modelFit,testSA)
missClass = function(values,prediction){sum(((prediction > 0.5)*1) != values)/length(values)}
missClass(testSA$chd,testPrediction)
missClass(trainSA$chd,trainPrediction)
library(ElemStatLearn)
library(randomForest)
data(vowel.train)
data(vowel.test)
vowel.train$y<-as.factor(vowel.train$y)
vowel.test$y<-as.factor(vowel.test$y)
set.seed(33833)
data<-rbind(vowel.train,vowel.test)
modelFit <- randomForest(y~.,
data=vowel.train,
importance=TRUE,
ntree=2000)
varImpPlot(modelFit)
library(ElemStatLearn)
library(randomForest)
data(vowel.train)
data(vowel.test)
vowel.train$y<-as.factor(vowel.train$y)
vowel.test$y<-as.factor(vowel.test$y)
set.seed(33833)
data<-rbind(vowel.train,vowel.test)
modelFit <- randomForest(y~.,
data=vowel.train,
importance=TRUE,
ntree=2000)
varImpPlot(modelFit)
varImp(modelFit)
median(varImp(modelFit))
mean(varImp(modelFit))
varImp(modelFit)
mean(varImp(modelFit))
varImp(modelFit)
varImpPlot(modelFit)
library(ElemStatLearn)
library(randomForest)
data(vowel.train)
data(vowel.test)
vowel.train$y<-as.factor(vowel.train$y)
vowel.test$y<-as.factor(vowel.test$y)
set.seed(33833)
data<-rbind(vowel.train,vowel.test)
modelFit <- train(y~.,data=vowel.train,model="rf")
varImpPlot(modelFit)
varImp(modelFit)
training<-read.csv("pml-training.csv",na.strings = c("NA","NaN","","#DIV/0!"))
testing<-read.csv("pml-testing.csv",na.strings = c("NA","NaN","","#DIV/0!"))
removeCols<-colSums(is.na(training))>0
removeCols<-names(removeCols[removeCols])
removeCols<-c(removeCols,'X','user_name')
removeCols<-c(removeCols,'raw_timestamp_part_1','raw_timestamp_part_2')
removeCols<-c(removeCols,'cvtd_timestamp','new_window','num_window')
training<-training[,setdiff(names(training),removeCols)]
testing<-testing[,setdiff(names(testing),removeCols)]
library(caret)
setwd("~/Trabajo/CursosOnline/DataScience/PracticalMachineLearning/CourseProject")
training<-read.csv("pml-training.csv",na.strings = c("NA","NaN","","#DIV/0!"))
testing<-read.csv("pml-testing.csv",na.strings = c("NA","NaN","","#DIV/0!"))
removeCols<-colSums(is.na(training))>0
removeCols<-names(removeCols[removeCols])
removeCols<-c(removeCols,'X','user_name')
removeCols<-c(removeCols,'raw_timestamp_part_1','raw_timestamp_part_2')
removeCols<-c(removeCols,'cvtd_timestamp','new_window','num_window')
training<-training[,setdiff(names(training),removeCols)]
testing<-testing[,setdiff(names(testing),removeCols)]
library(caret)
# define training control
train_control <- trainControl(method="cv", number=4)
modelLDA<-train(classe~.,data=training,trainControl="train_control",method="lda")
print(modelLDA)
confusionMatrix(modelLDA)
preds<-predict(modelLDA,testing)
modelNB<-train(classe~.,data=training,trainControl="train_control",method="rpart")
print(modelNB)
confusionMatrix(modelNB)
preds<-predict(modelNB,testing)
warnings()
modelNB<-train(classe~.,data=training,method="rpart")
print(modelNB)
modelNB<-train(classe~.,data=training,method="adaboost")
print(modelNB)
confusionMatrix(modelNB)
modelNB<-train(classe~.,data=training,method="lda")
print(modelNB)
confusionMatrix(modelNB)
modelNB<-train(classe~.,data=training,method="nb")
modelNB
accuracy(modelNB)
confusionMatrix(modelNB)
modelNB<-train(classe~.,data=training,method="nb")
summary(training)
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_chunk$set(echo = TRUE,cache = TRUE)
hist(training$classe)
hist(as.numeric(training$classe))
